CREATE TABLE IF NOT EXISTS USERS (
  USER_ID SERIAL PRIMARY KEY,
  FIRST_NAME VARCHAR(40) NOT NULL,
  LAST_NAME VARCHAR (40) NOT NULL,
  STATUS VARCHAR(10) NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_MODIFIED_DATE TIMESTAMP NOT NULL,
  EMAIL VARCHAR(100) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS ACCOUNTS (
  ACCOUNT_ID SERIAL PRIMARY KEY,
  USER_ID INT NOT NULL,
  ACCOUNT_NUMBER  VARCHAR(20) NOT NULL,
  TYPE_OF_ACCOUNT VARCHAR (20) NOT NULL,
  STATUS VARCHAR(10) NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_MODIFIED_DATE TIMESTAMP NOT NULL,
  FOREIGN KEY (USER_ID)
      REFERENCES USERS (USER_ID)
);


CREATE TABLE IF NOT EXISTS BALANCES (
  ACCOUNT_ID SERIAL PRIMARY KEY,
  ACCOUNT_BALANCE NUMBER(10,2) CONSTRAINT positive_account_balance CHECK (ACCOUNT_BALANCE >= 0),
  LAST_MODIFIED_DATE TIMESTAMP NOT NULL,
  FOREIGN KEY (ACCOUNT_ID)
      REFERENCES ACCOUNTS (ACCOUNT_ID)
);

CREATE TABLE IF NOT EXISTS CARDS (
  CARD_ID SERIAL PRIMARY KEY,
  ACCOUNT_ID INT NOT NULL,
  CARD_NUMBER NUMBER(16) UNIQUE,
  PIN NUMBER(6) NOT NULL,
  CVV NUMBER(3) NOT NULL,
  EXPIRY_DATE TIMESTAMP NOT NULL,
  STATUS VARCHAR(10) NOT NULL,
  LAST_MODIFIED_DATE TIMESTAMP NOT NULL,
  FOREIGN KEY (ACCOUNT_ID)
      REFERENCES ACCOUNTS (ACCOUNT_ID)
);

CREATE SEQUENCE IF NOT EXISTS TRANSACTION_ID_SEQ AS INTEGER START WITH 1;

CREATE TABLE IF NOT EXISTS TRANSACTIONS (
  TRANSACTION_ID SERIAL PRIMARY KEY,
  ACCOUNT_ID INT NOT NULL,
  TRANSACTION_TYPE VARCHAR(10) NOT NULL,
  TRANSACTION_AMOUNT NUMBER(10,2) CONSTRAINT positive_transaction_amount CHECK (TRANSACTION_AMOUNT >= 0),
  TO_ACCOUNT_NUMBER VARCHAR(20),
  ACCOUNT_BALANCE NUMBER(10,2) CONSTRAINT positive_transaction_account_balance CHECK (ACCOUNT_BALANCE >= 0),
  TRANSACTION_DATE TIMESTAMP NOT NULL,
  FOREIGN KEY (ACCOUNT_ID)
      REFERENCES ACCOUNTS (ACCOUNT_ID)
);
CREATE TABLE IF NOT EXISTS WITHDRAWALS (
  WITHDRAWAL_ID SERIAL PRIMARY KEY,
  ACCOUNT_ID INT NOT NULL,
  WITHDRAWAL_AMOUNT NUMBER(10,2) CONSTRAINT positive_withdrawal_amount CHECK (WITHDRAWAL_AMOUNT >= 0),
  FROM_MACHINE_NUMBER VARCHAR(200),
  ACCOUNT_BALANCE NUMBER(10,2) CONSTRAINT positive_withdrawal_account_balance CHECK (ACCOUNT_BALANCE >= 0),
  WITHDRAWAL_DATE TIMESTAMP NOT NULL,
  FOREIGN KEY (ACCOUNT_ID)
      REFERENCES ACCOUNTS (ACCOUNT_ID)
);

DELETE FROM CARDS;
DELETE FROM BALANCES;
DELETE FROM ACCOUNTS;
DELETE FROM USERS;
INSERT INTO USERS (USER_ID,FIRST_NAME,LAST_NAME,STATUS,CREATED_DATE,LAST_MODIFIED_DATE,EMAIL) VALUES
                 (1,'Lakshman','Tatikonda','ACTIVE',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,'tlaxman88@gmail.com');
INSERT INTO USERS (USER_ID,FIRST_NAME,LAST_NAME,STATUS,CREATED_DATE,LAST_MODIFIED_DATE,EMAIL) VALUES
                 (2,'Alex','Marco','ACTIVE',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,'test@gmail.com');

INSERT INTO ACCOUNTS (ACCOUNT_ID,USER_ID,ACCOUNT_NUMBER,TYPE_OF_ACCOUNT,STATUS,CREATED_DATE,LAST_MODIFIED_DATE)
        VALUES  (1,1,'NL77RABO12341243','DEBIT_CARD','ACTIVE',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
INSERT INTO ACCOUNTS (ACCOUNT_ID,USER_ID,ACCOUNT_NUMBER,TYPE_OF_ACCOUNT,STATUS,CREATED_DATE,LAST_MODIFIED_DATE)
        VALUES  (2,1,'NL12RABO45678753','CREDIT_CARD','ACTIVE',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);

INSERT INTO BALANCES (ACCOUNT_ID,ACCOUNT_BALANCE,LAST_MODIFIED_DATE)
        VALUES  (1,100,CURRENT_TIMESTAMP);
INSERT INTO BALANCES (ACCOUNT_ID,ACCOUNT_BALANCE,LAST_MODIFIED_DATE)
        VALUES  (2,0,CURRENT_TIMESTAMP);



INSERT INTO CARDS (ACCOUNT_ID,CARD_NUMBER,PIN,CVV,EXPIRY_DATE,STATUS,LAST_MODIFIED_DATE)
        VALUES  (1,'3542123465431234','123456','234',CURRENT_TIMESTAMP,'ACTIVE',CURRENT_TIMESTAMP);
INSERT INTO CARDS (ACCOUNT_ID,CARD_NUMBER,PIN,CVV,EXPIRY_DATE,STATUS,LAST_MODIFIED_DATE)
        VALUES  (2,'1234123412341234','456789','345',CURRENT_TIMESTAMP,'ACTIVE',CURRENT_TIMESTAMP);